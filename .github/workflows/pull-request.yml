# Pull Request Workflow
name: Trigger Framework PR

# Define when the workflow should run
on:
  pull_request:
    branches:
      - master

# Job Definition
jobs:
  # Push the source to a scratch org and run tests
  scratch-org-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code in the pull request
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Install SFDX CLI
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Install any DX plugins needed for the job
      - name: 'Install SFDX Plugins'
        run: |
          echo 'y' | sfdx plugins:install sfpowerkit
          echo 'y' | sfdx plugins:install @dxatscale/sfpowerscripts

      # Store secret for dev hub
      - name: 'Populate auth file with DEVHUB_SFDX_AUTH_URL secret'
        shell: bash
        run: 'echo ${{ secrets.DEVHUB_SFDX_AUTH_URL}} > ./DEVHUB_SFDX_AUTH_URL.txt'

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_AUTH_URL.txt -a devhub -d'

      # Create scratch org
      - name: 'Create scratch org'
        run: 'sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1'

      # Deploy source to scratch org
      - name: 'Push source to scratch org'
        run: 'sfdx force:source:push'

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: 'sfdx force:apex:test:run -c -r junit -d ./tests/apex -w 20'

      # Upload code coverage and test run reports
      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v2
        with:
          name: test-result
          path: tests/apex/test-result.xml

      - name: 'Upload Code Coverage Report'
        uses: actions/upload-artifact@v2
        with:
          name: codecoverage
          path: tests/apex/test-result-codecoverage.json

      # Validate Code Coverage
      - name: 'Validate Code Coverage in Scratch Org'
        run: 'sfdx sfpowerscripts:ValidateApexCoverage -u scratch-org -t 85'

      # Housekeeping
      - name: 'Delete scratch org'
        if: always()
        run: 'sfdx force:org:delete -p -u scratch-org'

  # Run Sonarscan
  static-code-scan:
    runs-on: ubuntu-latest
    needs: scratch-org-test
    steps:
      # Checkout the code in the pull request
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Download test run artifacts
      - name: 'Get Test and Code Coverage Reports'
        uses: actions/download-artifact@v2
        with:
          path: tests/apex

      # Run Sonarscan and report the 
      - name: 'SonarCloud Analysis'
        uses: sonarsource/sonarcloud-github-action@master
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectBaseDir: force-app/main/default
          args: >
            -Dsonar.apex.coverage.reportPath=tests/apex/codecoverage/test-result-codecoverage.json
            -Dsonar.testExecutionReportPaths=tests/apex/test-result/test-result.xml